###############################################################################
#
#    OpenEduCat Inc
#    Copyright (C) 2009-TODAY OpenEduCat Inc(<https://www.openeducat.org>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################

from odoo import _, api, fields, models
from odoo.exceptions import ValidationError


class OpMarksheetRegister(models.Model):
    _name = "op.marksheet.register"
    _inherit = ["mail.thread"]
    _description = "Marksheet Register"

    exam_session_id = fields.Many2one(
        'op.exam.session', 'Exam Session',
        required=True, tracking=True)
    marksheet_line = fields.One2many(
        'op.marksheet.line', 'marksheet_reg_id', 'Marksheets')
    generated_date = fields.Date(
        'Generated Date', required=True,
        default=fields.Date.today(), tracking=True)
    generated_by = fields.Many2one(
        'res.users', 'Generated By',
        default=lambda self: self.env.uid,
        required=True, tracking=True)
    state = fields.Selection(
        [('draft', 'Draft'), ('validated', 'Validated'),
         ('cancelled', 'Cancelled')], 'Status',
        default="draft", required=True, tracking=True)
    total_pass = fields.Integer(
        'Total Pass', compute='_compute_total_pass',
        tracking=True, store=True)
    total_failed = fields.Integer(
        'Total Fail', compute='_compute_total_failed',
        tracking=True, store=True)
    name = fields.Char('Marksheet Register', size=256, required=True,
                       tracking=True)
    result_template_id = fields.Many2one(
        'op.result.template', 'Result Template',
        required=True, tracking=True)
    active = fields.Boolean(default=True)

    @api.constrains('total_pass', 'total_failed')
    def _check_marks(self):
        for res in self:
            if (res.total_pass < 0.0) or (res.total_failed < 0.0):
                raise ValidationError(_('Enter proper pass or fail!'))

    @api.depends('marksheet_line.status')
    def _compute_total_pass(self):
        """Compute total passed students efficiently.
        
        Uses filtered operation for better performance.
        """
        for record in self:
            record.total_pass = len(record.marksheet_line.filtered(lambda m: m.status == 'pass'))

    @api.depends('marksheet_line.status')
    def _compute_total_failed(self):
        """Compute total failed students efficiently.
        
        Uses filtered operation for better performance.
        """
        for record in self:
            record.total_failed = len(record.marksheet_line.filtered(lambda m: m.status == 'fail'))

    def action_validate(self):
        """Validate marksheet register.
        
        Validates all marksheet lines have proper status before validation.
        """
        self.ensure_one()
        if not self.marksheet_line:
            raise ValidationError(_(
                "Cannot validate marksheet register without any marksheet lines."))
                
        # Check all marksheet lines have status
        lines_without_status = self.marksheet_line.filtered(lambda l: not l.status)
        if lines_without_status:
            student_names = ', '.join(lines_without_status.mapped('student_id.name'))
            raise ValidationError(_(
                "Cannot validate marksheet. Status missing for students: %s") % 
                student_names)
                
        self.state = 'validated'

    def act_cancel(self):
        """Cancel marksheet register."""
        self.ensure_one()
        if self.state == 'validated':
            raise ValidationError(_(
                "Cannot cancel validated marksheet register."))
        self.state = 'cancelled'

    def act_draft(self):
        """Reset marksheet register to draft state."""
        self.ensure_one()
        if self.state == 'validated':
            raise ValidationError(_(
                "Cannot reset validated marksheet register to draft."))
        self.state = 'draft'
        
    def get_pass_percentage(self):
        """Calculate pass percentage for this register.
        
        Returns percentage of students who passed.
        """
        self.ensure_one()
        total_students = len(self.marksheet_line)
        if total_students == 0:
            return 0.0
            
        return (self.total_pass / total_students) * 100
        
    def generate_marksheet_report(self):
        """Generate marksheet report action.
        
        Returns action to generate and view marksheet report.
        """
        self.ensure_one()
        return {
            'type': 'ir.actions.report',
            'report_name': 'openeducat_exam.marksheet_register_report',
            'report_type': 'qweb-pdf',
            'data': {'ids': [self.id]},
            'context': self.env.context,
        }
